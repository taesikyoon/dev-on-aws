AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template to create IAM roles and policies for a serverless application

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/notes"
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::aws-website-bucket/*"
        - PolicyName: LambdaPollyPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "polly:SynthesizeSpeech"
                Resource: "*"
        - PolicyName: LambdaCognitoPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminGetUser"
                  - "cognito-idp:AdminCreateUser"
                  - "cognito-idp:AdminDeleteUser"
                Resource: "*"
        - PolicyName: LambdaXRayPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
        - PolicyName: LambdaCloudWatchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  # S3 Bucket for Website Hosting
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket
  # S3 Bucket for MP3 Hosting
  MP3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: "polly-mp3-bucket-unique-name"

  # S3 Bucket Policy for MP3 Hosting
  MP3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref MP3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${MP3Bucket}/*"

  # DynamoDB Table
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "notes"
      AttributeDefinitions:
        - AttributeName: "UserId"
          AttributeType: "S"
        - AttributeName: "NoteId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UserId"
          KeyType: "HASH"
        - AttributeName: "NoteId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Cognito User Pool
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: "mp3-project"

Outputs:
  LambdaExecutionRoleARN:
    Description: "ARN of the Lambda Execution Role"
    Value: !GetAtt LambdaExecutionRole.Arn

  WebsiteBucketName:
    Description: "Name of the S3 bucket for website hosting"
    Value: !Ref S3Bucket

  MP3BucketName:
    Description: "Name of the S3 bucket for MP3 hosting"
    Value: !Ref MP3Bucket

  DynamoDBTableName:
    Description: "Name of the DynamoDB table"
    Value: !Ref DynamoDBTable

  CognitoUserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref CognitoUserPool
